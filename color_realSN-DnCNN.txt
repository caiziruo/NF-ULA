Since the original realSN-DnCNN from https://github.com/uclaopt/Provable_Plug_and_Play supports grayscale images by default and does not support 3-channels images, we made some small changes on it. Below are some instructions:

1. When using /Provable_Plug_and_Play/training/train_full_realsn.py , make sure to adjust the parser, "--channels=3" for 3-channel images.

2. When using /Provable_Plug_and_Play/training/utilities/dataset.py , I add some codes to read and preprocess the 3-channel dataset:

Change line 43 `Img = np.expand_dims(Img[:,:,0].copy(), 0)` to `Img = Img.transpose((2, 0, 1))`,
change line 66 `img = np.expand_dims(img[:,:,0], 0)` to `img = img.transpose((2, 0, 1))`.

3. When using /Provable_Plug_and_Play/training/model/full_realsn_models.py , 
there is some bugs with the line 27 "return conv_spectral_norm(conv, sigma=sigma)", 
then I move some codes from conv_sn_chen.py to full_realsn_models.py and it works again (I still donâ€™t know why).

You can delete the line 27 "return conv_spectral_norm(conv, sigma=sigma)", and fill it with
the following codes from Provable_Plug_and_Play/training/model/conv_sn_chen.py, line 72-93:


`
name='weight'
sigma=1.0
n_power_iterations=1
dim=0
eps=1e-12
fn = ConvSpectralNorm(name, sigma, n_power_iterations, dim, eps)
weight = conv._parameters[name]
height = weight.size(dim)

if conv.weight.shape[0] == 1:
    C_out = 1
elif conv.weight.shape[0] == 3:
    C_out = 3
else:
    C_out = 64

u = normalize(weight.new_empty(1, C_out, 40, 40).normal_(0, 1), eps=fn.eps)# input size
delattr(conv, fn.name)
conv.register_parameter(fn.name + "_orig", weight)
conv.register_buffer(fn.name, weight.data)
conv.register_buffer(fn.name + "_u", u)
conv.register_forward_pre_hook(fn)

return conv
`